buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
	maven {
		name 'CB Repo'
		url "http://chickenbones.net/maven/"
	}
}

ant.importBuild 'download-api.xml'
ant.importBuild 'build-ant.xml'

apply plugin: 'forge'

version = "0.9.0"
def buildby = 'local'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version += "." + ENV.BUILD_NUMBER
	buildby = 'RS485-Jenkins'
} else {
	version += ".local"
}

group= "rs485.logisticspipes" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "logisticspipes"

ant.version = version
ant.archivesBaseName = archivesBaseName

minecraft {
    version = "1.7.10-10.13.1.1217"
    runDir = "run/assets"
    replace '%VERSION%', project.version
    replace '%MCVERSION%', "1.7.10"
    replace '%DEBUG%', "false"
	replaceIn "LogisticsPipes.java"
	replaceIn "LPConstants.java"
}

jar {
    manifest {
        attributes(	'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader', 
					'FMLCorePluginContainsFMLMod': 'true',
					'Implementation-Vendor': 'RS485',
					'Implementation-Title': 'LogisticsPipes',
					'Implementation-Version': version,
					'Built-By': buildby )
    }
}

// configure  the source folders
sourceSets {
    main {
        java {
            srcDir 'common'
            srcDir 'proxy_bc61'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
        resources {
            srcDir 'resources'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
    }
    api {
        java {
            srcDir 'dummy'
            srcDir 'api'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
	}
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    compile files("build/download/buildcraft-6.1.5-dev.jar")
    compile 'org.projectlombok:lombok:1.12.6'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.3.49:dev'
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.3.23:dev'
    compile 'codechicken:CodeChickenLib:1.7.10-1.1.1.98:dev'
    compile 'codechicken:EnderStorage:1.7.10-1.4.5.19:dev'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'src'
}

artifacts {
	archives deobfJar
	archives sourceJar
	archives jar
}

tasks.compileApiJava.dependsOn('extract')
tasks.compileJava.dependsOn('loadFingerprints')
tasks.processResources.dependsOn('integradeCrowdin')
tasks.assemble.dependsOn('deobfJar', 'sourceJar', 'signJars')
