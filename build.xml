<project name="LogisticsPipes" basedir="../" default="main">
	<property environment="env"/>

	<!-- Properties -->
	<property name="build.dir"            value="build"/>
	<property name="src.dir"              value="src"/>
	<property name="test.dir"             value="test"/>
	<property name="sign.dir"             value="/home/jenkins/.sign"/>

	<property name="download.dir"         value="download"/>
	<property name="files.minecraft.dir"  value="jars"/>

	<property name="classes.dir"          value="${build.dir}/classes"/>
	<property name="jar.dir"              value="${build.dir}/dist"/>
	<property name="lib.dir"              value="${build.dir}/lib"/>

	<property name="forge.dir"            value="${build.dir}/forge"/>
	<property name="mcp.dir"              value="${forge.dir}/mcp"/>
	<property name="buildcraft.dir"       value="${mcp.dir}/unpack/buildcraft"/>
	<property name="forestry.dir"         value="${mcp.dir}/unpack/forestry"/>
	<property name="ic2.dir"              value="${mcp.dir}/unpack/ic2"/>
	<property name="cc.dir"               value="${mcp.dir}/unpack/cc"/>
	<property name="thaumcraft.dir"       value="${mcp.dir}/unpack/thaumcraft"/>

	<property name="minecraftsrc.dir"        value="${mcp.dir}/src/minecraft"/>

	<property file="${minecraftsrc.dir}/fmlversion.properties" />

	<property name="downloadserver"       value="http://rs485.theZorro266.com"/>
	<property name="downloadserver.dir"   value="external/"/>
	<property name="downloadserver.full"  value="${downloadserver}/${downloadserver.dir}"/>

	<property name="antcont.version"      value="1.0b3"/>
	<property name="mc.version"           value="1.6.4"/>
	<property name="forge.version"        value="9.11.1.953"/>
	<property name="forge.setup.version"  value="0"/> <!-- Change to regenerate Forge setup -->
	<property name="bc.version"           value="4.2.2"/>
	<property name="forestry.version"     value="2.3.1.0"/>
	<property name="ic2.version"          value="2.0.357-experimental"/>
	<property name="cc.version"           value="1.56"/>
	<property name="thaumcraft.version"   value="4.0.0"/>
	<property name="lombok.version"       value="0.11.8"/>
	<property name="jarjar.version"       value="1.4"/>
	<property name="guava.version"        value="15.0-SNAPSHOT"/>
	<property name="lp.version"           value="0.7.4"/>
	<property name="lp.version.full"	value=""/>
	
	<!-- Targets -->
	<target name="init-msg">
		<echo message="Starting build for ${lp.version.full} for MC ${mc.version} for BC ${bc.version}"/>
	</target>

	<target name="download">
		<mkdir dir="${download.dir}"/>

		<get src="http://files.minecraftforge.net/minecraftforge/minecraftforge-src-${mc.version}-${forge.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="http://mctech.sirius-black.org/external/buildcraft-src-${bc.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="http://mctech.sirius-black.org/external/forestry-api-${forestry.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="http://mctech.sirius-black.org/external/industrialcraft-2-api_${ic2.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ComputerCraftAPI${cc.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}Thaumcraft${thaumcraft.version}-API.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ant-contrib-${antcont.version}-bin.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}jarjar-${jarjar.version}.jar" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}guava-${guava.version}.jar" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}lombok-${lombok.version}.jar" dest="${download.dir}" usetimestamp="True"/>

		<echo message="Download finished"/>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<target name="check-setup-forge" depends="download, clean">
		<available file="${download.dir}/minecraftforge-setup-${mc.version}-${forge.version}-${forge.setup.version}.zip" property="setup.forge.present"/>
	</target>

	<target name="setup-forge" depends="check-setup-forge" unless="setup.forge.present">
		<unzip dest="${build.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="minecraftforge-src-${mc.version}-${forge.version}.zip"/>
			</fileset>
		</unzip>

		<copy file="${src.dir}/resources/lp_at_${mc.version}.cfg" todir="${forge.dir}/accesstransformers"/>

		<!-- Set executable permission on forge's *.sh -->
		<chmod dir="${forge.dir}" perm="a+rx" includes="**.sh"/>

		<!-- Install forge -->
		<echo message="Starting forge install process"/>

		<exec dir="${forge.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg value="/c"/>
			<arg value="install.cmd"/>
		</exec>

		<exec dir="${forge.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg value="install.sh"/>
		</exec>

		<echo message="Forge installation finished"/>

		<zip destfile="${download.dir}/minecraftforge-setup-${mc.version}-${forge.version}-${forge.setup.version}.zip" basedir="${build.dir}"/>
	</target>

	<target name="unzip-forge" depends="check-setup-forge" if="setup.forge.present">
		<unzip dest="${build.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="minecraftforge-setup-${mc.version}-${forge.version}-${forge.setup.version}.zip"/>
			</fileset>
		</unzip>
	</target>

	<target name="setup" depends="unzip-forge, setup-forge">
		<unzip dest="${buildcraft.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="buildcraft-src-${bc.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${forestry.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="forestry-api-${forestry.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${ic2.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="industrialcraft-2-api_${ic2.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${cc.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ComputerCraftAPI${cc.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${thaumcraft.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="Thaumcraft${thaumcraft.version}-API.zip"/>
			</fileset>
		</unzip>

		<echo message="Unpacking finished"/>

		<copy file="${download.dir}/lombok-${lombok.version}.jar" todir="${mcp.dir}/lib"/>
		
		<!-- Copy BC source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${buildcraft.dir}/common">
				<exclude name="**/buildcraft/devel"/>
			</fileset>
		</copy>
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${buildcraft.dir}/buildcraft_resources">
			</fileset>
		</copy>

		<echo message="Copied BC files"/>

		<!-- Copy Forestry API source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${forestry.dir}"/>
		</copy>

		<echo message="Copied Forestry API"/>

		<!-- Copy IC2 API source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${ic2.dir}"/>
		</copy>

		<echo message="Copied IC2 API"/>

		<!-- Copy CC API source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${cc.dir}"/>
		</copy>

		<echo message="Copied CC API"/>

		<!-- Copy ThaumCraft API source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${thaumcraft.dir}"/>
		</copy>

		<echo message="Copied ThaumCraft API"/>

		<!-- Copy Dummy classes source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${src.dir}/dummy"/>
		</copy>

		<echo message="Copied dummy files"/>

		<!-- Refresh MD5 -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c updatemd5.bat -f --client"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg line="updatemd5.sh -f --client"/>
		</exec>

		<echo message="Regenerated MD5s"/>
	</target>


	<target name="copySRC" >
		<unzip dest="${lib.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ant-contrib-${antcont.version}-bin.zip"/>
			</fileset>
		</unzip>
		<!-- Pull in ant-contrib for if task -->
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${lib.dir}/ant-contrib/ant-contrib-${antcont.version}.jar"/>
			</classpath>
		</taskdef>
		<echo message="Loaded ant-contrib"/>

		<!-- Delete LP source in build space -->
		<delete dir="${minecraftsrc.dir}/logisticspipes"/>
		<!-- and textures -->
		<delete dir="${minecraftsrc.dir}/assets/logisticspipes"/>
		<!-- and lang -->
		<delete dir="${minecraftsrc.dir}/lang/logisticspipes"/>

		<!-- Copy LP source -->
		<copy todir="${minecraftsrc.dir}">
			<fileset dir="${src.dir}/common"/>
		</copy>
		<replace file="${minecraftsrc.dir}/logisticspipes/LogisticsPipes.java" token="%VERSION%" value="${lp.version.full}"/>
		<replace file="${minecraftsrc.dir}/logisticspipes/LogisticsPipes.java" token="%MCVERSION%" value="${mc.version}"/>
		<replace file="${minecraftsrc.dir}/logisticspipes/LogisticsPipes.java" token="%DEBUG%" value="${DEBUG}"/>
		<!-- and textures -->
		<copy todir="${minecraftsrc.dir}/assets">
			<fileset dir="${src.dir}/resources/assets"/>
		</copy>
		<!-- and lang -->
		<copy todir="${minecraftsrc.dir}/lang">
			<fileset dir="${src.dir}/resources/lang"/>
		</copy>

		<echo message="Loading FingerPrint"/>
		<if>
			<available file="${sign.dir}/.fingerprint"/>
			<then>
				<loadfile property="fingerprint" srcFile="${sign.dir}/.fingerprint"/>
				<replace file="${minecraftsrc.dir}/logisticspipes/LogisticsPipes.java" token="%------------CERTIFICATE-SUM-----------%" value='*/ certificateFingerprint="${fingerprint}", /*'/>
			</then>
		</if>

		<!-- Copy dummy jar for MC in mcp -->
		<copy todir="${mcp.dir}/jars/mods" file="${src.dir}/LogisticsPipes_dummy.jar"/>
	</target>


	<target name="compile" depends="copySRC">

		<echo message="Compiling version ${lp.version.full}"/>

		<!-- Recompile -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c recompile.bat --client"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg line="recompile.sh --client"/>
		</exec>

		<!-- Reobf -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c reobfuscate_srg.bat --client"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg line="reobfuscate_srg.sh --client"/>
		</exec>

		<!-- Copy LP classes -->
		<copy todir="${classes.dir}/client">
			<fileset dir="${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy mcmod.info -->
		<copy todir="${classes.dir}/client">
			<fileset dir="${src.dir}/resources"></fileset>
		</copy>

		<replace file="${classes.dir}/client/mcmod.info" token="%VERSION%" value="${lp.version.full}"/>
		<replace file="${classes.dir}/client/mcmod.info" token="%MCVERSION%" value="${mc.version}"/>

		<echo message="Compiling finished"/>
	</target>

	<target name="package-simple" depends="compile">
		<echo message="Packing version ${lp.version.full}"/>

		<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
			classpath="${download.dir}/jarjar-${jarjar.version}.jar"/>

		<jarjar destfile="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" basedir="${classes.dir}/client">
			<zipfileset src="${download.dir}/guava-${guava.version}.jar"/>
			<rule pattern="com.google.common.**" result="logisticspipes.com.google.common.@1"/>

			<manifest>
				<attribute name="FMLCorePlugin" value="logisticspipes.asm.LogisticsPipesCoreLoader"/>
				<attribute name="FMLCorePluginContainsFMLMod" value="true"/>
			</manifest>
		</jarjar>

		<echo message="Packing finished"/>
	</target>

	<target name="package-sign" depends="compile">
		<echo message="Loading SignSettings"/>
		<loadfile property="key" srcFile="${sign.dir}/.key"/>

		<echo message="Packing version ${lp.version.full}"/>

		<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
			classpath="${download.dir}/jarjar-${jarjar.version}.jar"/>

		<jarjar destfile="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" basedir="${classes.dir}/client">
			<zipfileset src="${download.dir}/guava-${guava.version}.jar"/>
			<rule pattern="com.google.common.**" result="logisticspipes.com.google.common.@1"/>

			<manifest>
				<attribute name="Built-By" value="RS485-Jenkins"/>
				<attribute name="Implementation-Vendor" value="RS485"/>
				<attribute name="Implementation-Title" value="LogisticsPipes"/>
				<attribute name="Implementation-Version" value="${lp.version.full}"/>
				<attribute name="FMLCorePlugin" value="logisticspipes.asm.LogisticsPipesCoreLoader"/>
				<attribute name="FMLCorePluginContainsFMLMod" value="true"/>
			</manifest>
		</jarjar>

		<signjar jar="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" alias="RS485" keystore="${sign.dir}/.keystore" storepass="${key}"/>

		<echo message="Packing finished"/>

	</target>

	<target name="vars">
		<property name="lp.version.full"      value="${lp.version}.${BUILD_NUMBER}"/>
	</target>

	<target name="vars-dev">
		<property name="lp.version.full"      value="${lp.version}.dev.${BUILD_NUMBER}"/>
	</target>

	<target name="vars-test">
		<property name="lp.version.full" value="0.0.0.0"/>
		<property name="DEBUG"           value="true"/>
	</target>

	<target name="main" depends="vars, init-msg, setup, package-simple"/>

	<target name="ci-dev" depends="vars-dev, init-msg, setup, package-sign"/>

	<target name="ci" depends="vars, init-msg, setup, package-sign"/>

	<target name="test" depends="vars-test, init-msg, setup, compile, package-simple">
		<!--
		<delete dir="${test.dir}"/>
		<mkdir dir="${test.dir}"/>
		<get src="${downloadserver.full}mcpc-plus-1.6.2-R0.2-forge836-B54.jar" dest="${test.dir}/svr.jar" usetimestamp="True"/>
		<mkdir dir="${test.dir}/mods"/>
		<get src="${downloadserver.full}buildcraft-A-4.0.1.jar" dest="${test.dir}/mods" usetimestamp="True"/>
		<copy file="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" todir="${test.dir}/mods"/>
		<copy file="${src.dir}/expect.tcl" todir="${test.dir}"/>

		<exec dir="${test.dir}" executable="expect" osfamily="unix" failonerror="true">
			<arg value="expect.tcl"/>
		</exec>
		-->
	</target>

</project>
