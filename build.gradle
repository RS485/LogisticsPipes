buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'de.undercouch:gradle-download-task:3.4.3'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.3.0"
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'signing'
apply plugin: 'de.undercouch.download'
//apply plugin: 'curseforge'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = "0.10.2"
group= "network.rs485.logisticspipes" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "logisticspipes"

def buildby = 'local'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version += "." + ENV.BUILD_NUMBER
    buildby = 'RS485-Jenkins'
} else {
    version += ".99999"
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run/assets"
    replace '%VERSION%', project.version
    replace '%MCVERSION%', project.minecraft.version
    replace '%DEBUG%', "false"
    replaceIn "LPConstants.java"
    mappings = "snapshot_20171120"
}

jar {
    manifest {
        attributes('FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader',
                   'FMLCorePluginContainsFMLMod': 'true',
                   'Implementation-Vendor': 'RS485',
                   'Implementation-Title': 'LogisticsPipes',
                   'Implementation-Version': version,
                   'Built-By': buildby )
    }
}

// configure  the source folders
sourceSets {
    main.java.srcDirs += 'common'
    main.resources.srcDirs += 'resources'
    api.java.srcDirs += 'dummy'
}

test {
    reports {
        html.enabled = true
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    jcenter()
    maven {
        name = "RS485 Cache"
        url = "https://rs485.network/maven-cache/"
    }
    maven {
        name = 'CB Repo'
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "JEI Maven."
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "http://maven.shadowfacts.net/"
    }
    maven {
        url = "https://cc.crzd.me/maven/"
    }
    maven {
        url = "http://maven.cil.li/"
    }
    maven {
        name = "buildcraft"
        url = "https://mod-buildcraft.com/maven/"
    }
    maven { // JEI Bees & Thaumcraft
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "buildcraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
		url "http://maven.amadornes.com/"
	}
	maven {
		name = "CoFH Maven"
		url = "http://maven.covers1624.net"
	}
}

dependencies {
    deobfCompile "com.mod-buildcraft:buildcraft:7.99.19"
    compileOnly 'org.projectlombok:lombok:1.16.8'
    implementation "net.shadowfacts:Forgelin:1.8.3"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation "com.google.code.gson:gson:2.8.0" // update this together with Forge/Minecraft
    compile 'codechicken:NotEnoughItems:1.12.2-2.4.2.240:deobf'
    compile 'codechicken:CodeChickenLib:1.12.2-3.1.7.340:deobf'
    compile 'codechicken:EnderStorage:1.12.2-2.4.2.126:deobf'
    compile 'net.industrial-craft:industrialcraft-2:2.8.97-ex112:api'
    compile "li.cil.oc:OpenComputers:MC1.12.2-1.7.2.+:api"
    compile "appeng:appliedenergistics2:rv6-stable-6:api"
    compileOnly "dan200.computercraft:ComputerCraft:1.80pr1-build5"
	compileOnly "cofh:CoFHCore:1.12.2-4.5.2.+:universal"
    compileOnly "cofh:ThermalDynamics:1.12.2-2.5.1.+:universal"
    deobfCompile "thaumcraft:Thaumcraft:1.12.2:6.1.BETA26"
    runtimeOnly "baubles:Baubles:1.12:1.5.2"
	deobfCompile "MCMultiPart2:MCMultiPart:2.5.3"
    testImplementation "org.junit.jupiter:junit-jupiter:5.4.2"
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes(
            'FMLCorePlugin': 'logisticspipes.asm.LogisticsPipesCoreLoader',
            'FMLCorePluginContainsFMLMod': 'true',
            'Implementation-Vendor': 'RS485',
            'Implementation-Title': 'LogisticsPipes',
            'Implementation-Version': version,
            'Built-By': buildby)
    }
}

task copyLPDummyServer(type: Copy) {
    from 'LogisticsPipes_dummy.jar'
    into 'run/assets_server/mods'
}

task copyLPDummy(dependsOn: copyLPDummyServer, type: Copy) {
    from 'LogisticsPipes_dummy.jar'
    into 'run/assets/mods'
}

curseforge {
    apiKey = project.hasProperty('LogisticsPipes.curseForgeApiKey') ? project.findProperty("LogisticsPipes.curseForgeApiKey") : '0'
    project {
        id = "232838"
        changelog = project.hasProperty('changelog') ? project.findProperty('changelog') : ''
        releaseType = 'beta'
        relations {
            requiredDependency 'codechicken-lib-1-8'
            requiredDependency 'shadowfacts-forgelin'
        }

        mainArtifact(jar) {
            displayName = 'Logistics Pipes ' + project.version
        }
    }
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

task enableSigningTasks {
    doFirst {
        tasks.withType(Sign) {
            enabled = true
        }
    }
}

signing {
    useGpgCmd()
    sign jar
    sign deobfJar
    sign sourceJar
}

task sign {
    dependsOn enableSigningTasks
    dependsOn(tasks.withType(Sign))
}

tasks.withType(Sign) {
    // disable signing by default
    enabled = false
    mustRunAfter enableSigningTasks
    ext.useJarsigner = (name != "signSourceJar") // dont sign source jar, it doesn't have classes
}

gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.allTasks.each {
        if (it instanceof Sign && it.useJarsigner) {
            def inputFiles = it.getInputFiles()
            it.doFirst {
                // see https://ant.apache.org/manual/Tasks/signjar.html for arguments
                // ForgeGradle also uses ant.signjar: https://fckaf.de/DCw
                inputFiles.each { file ->
                    ant.signjar(
                            jar: file,
                            alias: "1",
                            storetype: findProperty("LogisticsPipes.storetype"),
                            keystore: findProperty("LogisticsPipes.keystore"),
                            storepass: findProperty("LogisticsPipes.storepass"),
                            verbose: "true",
                            preservelastmodified: "true"
                    )
                }
            }
        }
    }
}

task downloadLanguage(type: Download) {
    onlyIfModified true
    quiet true
    src "https://github.com/RS485/LogisticsPipes-Language/archive/master.zip"
    dest new File(temporaryDir, "language.zip")
}

task languageMain(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.dest)
    into "$buildDir/resources/main/assets/logisticspipes/lang/"
    include "*/*.lang"

    includeEmptyDirs false
    eachFile { fcd -> fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(1)) }
}

task languageBook(dependsOn: downloadLanguage, type: Copy) {
    from zipTree(downloadLanguage.dest)
    into "$buildDir/resources/main/assets/logisticspipes/book/"
    include "*/book/"

    includeEmptyDirs false
    eachFile { fcd -> fcd.relativePath = new RelativePath(!fcd.isDirectory(), fcd.relativePath.segments.drop(2)) }
}

task language(dependsOn: [languageMain, languageBook], type: Copy) {
    processResources.dependsOn language
}
